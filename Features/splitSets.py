import pandas as pd
import numpy as np
import utils
from sklearn.model_selection import train_test_split


def generateSetTables(augmentFraction=0.5, quickSplit=False):
    """
    Generates all the tables used by the machine learning models, distributing the dataset in training, validation
    and test sets.
    Warning:
        * The walking_activity_features.csv file must have already been generated by the cleanFeaturise run;
        * Possible pandas warnings when running this code should be ignored.

    Input:
        - augmentFraction: float
            0 < augmentFraction <=1
            Fraction of the training data that is going to have the augmented version used.
        - quickSplit: bool
            Whether to generate only the tables Train, Test and Val. This makes the routine quicker to be
            used during the outlier search procedure.
    """

    demographics = pd.read_csv("../data/demographics.csv", index_col=0)
    # Dropping rows without answer for gender
    demographics[(demographics.gender == "Male") | (demographics.gender == "Female")]
    demographics = demographics.join(pd.get_dummies(demographics["gender"]).Male)
    columns_to_keep_demographics = [
        # 'ROW_VERSION',
        # 'recordId',
        'healthCode',
        # 'appVersion',
        # 'phoneInfo',
        'age',
        # 'are-caretaker',
        # 'deep-brain-stimulation',
        # 'diagnosis-year',
        # 'education',
        # 'employment',
        # 'health-history',
        # 'healthcare-provider',
        # 'home-usage',
        # 'last-smoked',
        # 'maritalStatus',
        # 'medical-usage',
        # 'medical-usage-yesterday',
        # 'medication-start-year',
        # 'onset-year',
        # 'packs-per-day',
        # 'past-participation',
        # 'phone-usage',
        'professional-diagnosis',
        # 'race',
        # 'smartphone',
        # 'smoked',
        # 'surgery',
        # 'video-usage',
        # 'years-smoking'
        # 'gender',
        'Male'
    ]
    demographics = demographics[columns_to_keep_demographics]

    demographics.rename(columns={'professional-diagnosis': 'Target'}, inplace=True)

    # Dropping rows with invalid values
    demographics.replace([np.inf, -np.inf], np.nan, inplace=True)
    demographics.dropna(axis=0, how='any', inplace=True)

    fileName = 'walking_activity_features'
    walking_activity_features = pd.read_csv("../data/{}.csv".format(fileName), index_col=0)

    extraColumns = ['healthCode',
                    # 'accel_walking_outbound.json.items',
                    'deviceMotion_walking_outbound.json.items',
                    'pedometer_walking_outbound.json.items',
                    # 'accel_walking_return.json.items',
                    # 'deviceMotion_walking_return.json.items',
                    # 'pedometer_walking_return.json.items',
                    # 'accel_walking_rest.json.items',
                    'deviceMotion_walking_rest.json.items',
                    'medTimepoint'
                    ]

    demographics_train, demographics_test_val = train_test_split(demographics, test_size=0.2)
    demographics_test, demographics_val = train_test_split(demographics_test_val, test_size=0.5)
    train = pd.merge(walking_activity_features, demographics_train, on="healthCode")
    test = pd.merge(walking_activity_features, demographics_test, on="healthCode")
    val = pd.merge(walking_activity_features, demographics_val, on="healthCode")
    listFeatures = [(train, 'train'), (test, 'test'), (val, 'val')]

    noSplitFeatures = pd.DataFrame()

    for features, featuresSplitName in listFeatures:

        features = removeInconsistentMedTipoint(features)

        noSplitFeatures = pd.concat([features, noSplitFeatures])
        features.to_csv("../data/{}_extra_columns.csv".format(featuresSplitName))
        features.drop(extraColumns, axis=1, inplace=True)
        features.to_csv("../data/{}.csv".format(featuresSplitName))

    if quickSplit is False:

        noSplitFeatures.reset_index(inplace=True, drop=True)
        featuresName = 'features'
        noSplitFeatures.to_csv("../data/{}_extra_columns.csv".format(featuresName))
        noSplitFeatures.drop(extraColumns, axis=1, inplace=True)
        noSplitFeatures.to_csv("../data/{}.csv".format(featuresName))

        utils.generateAugmentedTable('train', augmentFraction=augmentFraction)
        utils.outlierRemovalSaving()

        numberOfFolds = 10
        for index, demFold in enumerate(np.array_split(demographics.sample(frac=1), numberOfFolds)):
            fold_extra_columns = pd.merge(walking_activity_features, demFold, on="healthCode")
            fold_extra_columns = removeInconsistentMedTipoint(fold_extra_columns)
            fold_extra_columns.reset_index(inplace=True, drop=True)
            fold_extra_columns.to_csv("../data/fold{}_extra_columns.csv".format(index))
            utils.generateAugmentedTable('fold{}'.format(index), augmentFraction=augmentFraction)

            fold = fold_extra_columns.drop(extraColumns, axis=1)
            fold.to_csv("../data/fold{}.csv".format(index))

            fold_extra_columns = utils.outlierRemoval(fold_extra_columns)
            fold_extra_columns.reset_index(inplace=True, drop=True)
            fold_extra_columns.to_csv("../data/fold{}_noOutliers_extra_columns.csv".format(index))
            utils.generateAugmentedTable('fold{}_noOutliers'.format(index), augmentFraction=augmentFraction)

            fold = fold_extra_columns.drop(extraColumns, axis=1)
            fold.to_csv("../data/fold{}_noOutliers.csv".format(index))


def removeInconsistentMedTipoint(features):
    """
    Cleans inconsistent medTimepoint and also removes Parkinson
    patients just after medication.

    Input:
        - features: pandas DataFrame
            Table to apply the cleaning procedure.
    """
    cleanedFeatures = features[(features.medTimepoint == "I don't take Parkinson medications") |
                               ((features.Target) & (features.medTimepoint == "Immediately before Parkinson medication")) |
                               ((features.Target) & (features.medTimepoint == "Another time"))]
    # ((features.Target) & (features.medTimepoint == "Just after Parkinson medication (at your best)"))]
    return cleanedFeatures
